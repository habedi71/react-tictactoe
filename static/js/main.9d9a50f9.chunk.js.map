{"version":3,"sources":["Cell.js","Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","id","value","onClickProps","onClick","className","Board","state","player","cells","Array","fill","clickHandler","nextPlayer","isWinner","setState","gameState","board","X","O","filter","cell","length","startOver","c","map","n","i","this","Component","Game","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAUeA,G,MARF,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aAC1B,OACC,yBAAKC,QAAS,kBAAMD,EAAaF,IAAKI,UAAU,QAC9CH,KC+DWI,E,4MA/DdC,MAAQ,CACPC,OAAQ,IACRC,MAAO,IAAIC,MAAM,GAAGC,KAAK,K,EAoB1BC,aAAe,SAACX,GAAQ,IAAD,EACI,EAAKM,MAAvBE,EADc,EACdA,MACFI,EAAwB,MAFR,EACPL,OACqB,IAAM,IACxB,KAAdC,EAAMR,IAAe,EAAKa,SAASL,KACtCA,EAAMR,GAAM,EAAKM,MAAMC,OACvB,EAAKO,SAAS,CAAEP,OAAQK,EAAYJ,Y,EAItCO,UAAY,SAACC,EAAOT,GAEnB,OAAI,EAAKM,SAASG,GACX,UAAN,OAFqB,CAAEC,EAAG,IAAKC,EAAG,KAEH,EAAKZ,MAAMC,QAA1C,WACUS,EAAMG,QAAO,SAACC,GAAD,MAAmB,KAATA,KAAaC,OAAS,EACjD,eAAN,OAAsBd,GAEjB,yB,EAGPe,UAAY,WACX,EAAKR,SAAS,CAAEP,OAAQ,IAAKC,MAAO,IAAIC,MAAM,GAAGC,KAAK,O,uDArC9Ca,GAYR,MAXe,CAAC,GAAD,OACXA,EAAE,IADS,OACJA,EAAE,IADE,OACGA,EAAE,IADL,UAEXA,EAAE,IAFS,OAEJA,EAAE,IAFE,OAEGA,EAAE,IAFL,UAGXA,EAAE,IAHS,OAGJA,EAAE,IAHE,OAGGA,EAAE,IAHL,UAIXA,EAAE,IAJS,OAIJA,EAAE,IAJE,OAIGA,EAAE,IAJL,UAKXA,EAAE,IALS,OAKJA,EAAE,IALE,OAKGA,EAAE,IALL,UAMXA,EAAE,IANS,OAMJA,EAAE,IANE,OAMGA,EAAE,IANL,UAOXA,EAAE,IAPS,OAOJA,EAAE,IAPE,OAOGA,EAAE,IAPL,UAQXA,EAAE,IARS,OAQJA,EAAE,IARE,OAQGA,EAAE,KAIlBC,KAAI,SAACC,EAAGC,GAAJ,MAAiB,QAAND,GAAqB,QAANA,KAC9BN,QAAO,SAACM,GAAD,OAAa,IAANA,KAAa,K,+BA0BpB,IAAD,SACkBE,KAAKrB,MAAvBE,EADA,EACAA,MAAOD,EADP,EACOA,OACTS,EAAQR,EAAMgB,KAAI,SAACJ,EAAMM,GAC9B,OAAO,kBAAC,EAAD,CAAMxB,aAAc,EAAKS,aAAcV,MAAOmB,EAAMpB,GAAI0B,OAGhE,OACC,oCACC,yBAAKtB,UAAU,SAASY,GACxB,wBAAIZ,UAAU,QAAQuB,KAAKZ,UAAUP,EAAOD,IAC5C,4BAAQH,UAAU,WAAWD,QAASwB,KAAKL,WAA3C,mB,GAxDgBM,aCILC,EAJF,WACZ,OAAO,kBAAC,EAAD,OCWOC,E,4MAXdxB,MAAQ,G,uDAEP,OACC,yBAAKF,UAAU,OACd,2CACA,kBAAC,EAAD,W,GANcwB,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9d9a50f9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Cell = ({ id, value, onClickProps }) => {\r\n\treturn (\r\n\t\t<div onClick={() => onClickProps(id)} className=\"cell\">\r\n\t\t\t{value}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Cell;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Cell from \"./Cell\";\r\n\r\nclass Board extends Component {\r\n\tstate = {\r\n\t\tplayer: \"X\",\r\n\t\tcells: new Array(9).fill(\"\"),\r\n\t};\r\n\r\n\tisWinner(c) {\r\n\t\tconst winner = [\r\n\t\t\t`${c[0]}${c[1]}${c[2]}`,\r\n\t\t\t`${c[3]}${c[4]}${c[5]}`,\r\n\t\t\t`${c[6]}${c[7]}${c[8]}`,\r\n\t\t\t`${c[0]}${c[3]}${c[6]}`,\r\n\t\t\t`${c[1]}${c[4]}${c[7]}`,\r\n\t\t\t`${c[2]}${c[5]}${c[8]}`,\r\n\t\t\t`${c[0]}${c[4]}${c[8]}`,\r\n\t\t\t`${c[2]}${c[4]}${c[6]}`,\r\n\t\t];\r\n\r\n\t\treturn winner\r\n\t\t\t.map((n, i) => (n === \"XXX\" || n === \"OOO\" ? true : false))\r\n\t\t\t.filter((n) => n !== false)[0];\r\n\t}\r\n\r\n\tclickHandler = (id) => {\r\n\t\tconst { cells, player } = this.state;\r\n\t\tconst nextPlayer = player === \"X\" ? \"O\" : \"X\";\r\n\t\tif (cells[id] === \"\" && !this.isWinner(cells)) {\r\n\t\t\tcells[id] = this.state.player;\r\n\t\t\tthis.setState({ player: nextPlayer, cells });\r\n\t\t}\r\n\t};\r\n\r\n\tgameState = (board, player) => {\r\n\t\tconst currentPlayer = { X: \"O\", O: \"X\" };\r\n\t\tif (this.isWinner(board)) {\r\n\t\t\treturn `Palyer ${currentPlayer[this.state.player]} won!!!`;\r\n\t\t} else if (board.filter((cell) => cell === \"\").length > 0) {\r\n\t\t\treturn `Next Player ${player}`;\r\n\t\t}\r\n\t\treturn `No Winner, Play again`;\r\n\t};\r\n\r\n\tstartOver = () => {\r\n\t\tthis.setState({ player: \"X\", cells: new Array(9).fill(\"\") });\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { cells, player } = this.state;\r\n\t\tconst board = cells.map((cell, i) => {\r\n\t\t\treturn <Cell onClickProps={this.clickHandler} value={cell} id={i} />;\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<div className=\"board\">{board}</div>\r\n\t\t\t\t<h4 className=\"flex\">{this.gameState(cells, player)}</h4>\r\n\t\t\t\t<button className=\"btn flex\" onClick={this.startOver}>\r\n\t\t\t\t\tStart Over\r\n\t\t\t\t</button>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\n\r\nimport Board from \"./Board\";\r\n\r\nconst Game = () => {\r\n\treturn <Board />;\r\n};\r\n\r\nexport default Game;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Game from \"./Game\";\n\nclass App extends Component {\n\tstate = {};\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Tic Tac Toe</h1>\n\t\t\t\t<Game />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}